// Generated by gencpp from file stm32_to_rk3588/rk3588_to_stm32_uart.msg
// DO NOT EDIT!


#ifndef STM32_TO_RK3588_MESSAGE_RK3588_TO_STM32_UART_H
#define STM32_TO_RK3588_MESSAGE_RK3588_TO_STM32_UART_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stm32_to_rk3588
{
template <class ContainerAllocator>
struct rk3588_to_stm32_uart_
{
  typedef rk3588_to_stm32_uart_<ContainerAllocator> Type;

  rk3588_to_stm32_uart_()
    : Rk3588_To_Stm32()  {
      Rk3588_To_Stm32.assign(0);
  }
  rk3588_to_stm32_uart_(const ContainerAllocator& _alloc)
    : Rk3588_To_Stm32()  {
  (void)_alloc;
      Rk3588_To_Stm32.assign(0);
  }



   typedef boost::array<uint8_t, 20>  _Rk3588_To_Stm32_type;
  _Rk3588_To_Stm32_type Rk3588_To_Stm32;





  typedef boost::shared_ptr< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> const> ConstPtr;

}; // struct rk3588_to_stm32_uart_

typedef ::stm32_to_rk3588::rk3588_to_stm32_uart_<std::allocator<void> > rk3588_to_stm32_uart;

typedef boost::shared_ptr< ::stm32_to_rk3588::rk3588_to_stm32_uart > rk3588_to_stm32_uartPtr;
typedef boost::shared_ptr< ::stm32_to_rk3588::rk3588_to_stm32_uart const> rk3588_to_stm32_uartConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator1> & lhs, const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator2> & rhs)
{
  return lhs.Rk3588_To_Stm32 == rhs.Rk3588_To_Stm32;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator1> & lhs, const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stm32_to_rk3588

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d26e2a2c893b472f6808d3bff9a6c2b2";
  }

  static const char* value(const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd26e2a2c893b472fULL;
  static const uint64_t static_value2 = 0x6808d3bff9a6c2b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stm32_to_rk3588/rk3588_to_stm32_uart";
  }

  static const char* value(const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[20] Rk3588_To_Stm32\n"
;
  }

  static const char* value(const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Rk3588_To_Stm32);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rk3588_to_stm32_uart_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stm32_to_rk3588::rk3588_to_stm32_uart_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "Rk3588_To_Stm32: ";
    if (v.Rk3588_To_Stm32.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.Rk3588_To_Stm32.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<uint8_t>::stream(s, true ? std::string() : indent + "    ", v.Rk3588_To_Stm32[i]);
    }
    if (v.Rk3588_To_Stm32.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // STM32_TO_RK3588_MESSAGE_RK3588_TO_STM32_UART_H
